<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Grundleborg&#39;s Cave</title>
    <link>https://grundleborg.github.io/posts/</link>
    <description>Recent content in Posts on Grundleborg&#39;s Cave</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 24 Aug 2017 14:38:21 +0100</lastBuildDate>
    
	<atom:link href="https://grundleborg.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Custom Slash Commands in Mattermost with AWS Lambda and API Gateway</title>
      <link>https://grundleborg.github.io/posts/mattermost-custom-slash-command-aws-lambda/</link>
      <pubDate>Thu, 24 Aug 2017 14:38:21 +0100</pubDate>
      
      <guid>https://grundleborg.github.io/posts/mattermost-custom-slash-command-aws-lambda/</guid>
      <description>Mattermost comes with a number of built-in slash commands, such as /join to join a channel, or /away to set your status to away. It also supports Slack-compatible custom slash commands. These offer a simple way to add custom commands that help to make your team&amp;rsquo;s workflow fast, efficient and enjoyable.
Custom slash commands are actually very easy to build. You just need to set up an HTTP endpoint which will receive the command payload, processes it and respond with the message which will be posted.</description>
    </item>
    
    <item>
      <title>React Component Testing in Mattermost</title>
      <link>https://grundleborg.github.io/posts/react-component-testing-in-mattermost/</link>
      <pubDate>Tue, 02 May 2017 16:25:32 +0100</pubDate>
      
      <guid>https://grundleborg.github.io/posts/react-component-testing-in-mattermost/</guid>
      <description>Mattermost is a large web app written in ReactJS. It currently consists of a little over 300 components, built using a &amp;ldquo;Flux-like&amp;rdquo; architecture. This makes unit testing of components particularly challenging as the vast majority of them call methods on the stores directly. Of course, it&amp;rsquo;s possible to mock out the stores in every test, but it&amp;rsquo;s not really practical to do this.
If that was the end of the story, it would be a very boring one indeed.</description>
    </item>
    
  </channel>
</rss>